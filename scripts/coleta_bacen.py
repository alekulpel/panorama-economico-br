# scripts/coleta_bacen.py

print("üöÄ Iniciando script de coleta de dados do BACEN SGS...")

import pandas as pd
from bcb import sgs # Importa a funcionalidade SGS da biblioteca python-bcb
import os
import logging
from datetime import datetime # Para usar a data atual como padr√£o

# Configura√ß√£o do Logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- C√≥digos das S√©ries no SGS/BCB ---
# √â uma boa pr√°tica verificar os c√≥digos e suas descri√ß√µes no site do BCB
# https://www3.bcb.gov.br/sgspub/localizarseries/localizarSeries.do?method=prepararTelaLocalizarSeries
CODIGOS_BCB = {
    # Nome descritivo: c√≥digo SGS
    #'selic_meta': 432,        # Taxa de juros - Meta Selic definida pelo Copom (% a.a.) - Di√°ria (mas muda menos freq.)
    #'selic_diaria': 11,       # Taxa de juros - Selic acumulada no m√™s (% a.m.) - Di√°ria - CUIDADO: essa √© mensal acumulada, talvez 1178 seja melhor (efetiva di√°ria)
    #'selic_efetiva_diaria': 1178, # Taxa de juros - Selic efetiva (% a.a.) - Base 252 - Di√°ria
    #'ipca_mensal': 433,       # √çndice nacional de pre√ßos ao consumidor-amplo (IPCA) - Var. % mensal - Mensal
    'cambio_usd_venda': 1,    # Taxa de C√¢mbio - Livre - D√≥lar americano (venda) - Boletim di√°rio PTAX - Di√°ria
    # Adicione outros c√≥digos se precisar (ex: IGP-M, Produ√ß√£o Industrial do IBGE via BCB, etc.)
}

# --- Par√¢metros ---
# Use uma data de in√≠cio razo√°vel para o seu projeto
DATA_INICIO = '2002-01-01' # Exemplo: in√≠cio de 2002
# Pode usar a data atual como data fim padr√£o
# DATA_FIM = datetime.today().strftime('%Y-%m-%d') # Descomente se quiser limitar a data fim

# Diret√≥rio e nome do arquivo de sa√≠da (relativo √† pasta 'scripts')
output_dir = "/home/akulpel/Projetos/panorama-economico-br/data/raw"
output_file = os.path.join(output_dir, "indicadores_bacen_bruto.csv")

def coleta_dados_bacen(codigos, data_inicio, filename):
    """
    Coleta s√©ries temporais do SGS/BCB usando a biblioteca python-bcb
    e salva em um arquivo CSV.
    """
    codigos_numericos = list(codigos.values()) # A fun√ß√£o sgs.get espera uma lista de n√∫meros
    nomes_descritivos = list(codigos.keys())   # Usaremos para logging

    logging.info(f"Iniciando coleta do BCB SGS para os c√≥digos: {codigos_numericos} ({', '.join(nomes_descritivos)})")
    logging.info(f"Per√≠odo solicitado: de {data_inicio} at√© hoje.") # Ajuste se usar DATA_FIM

    try:
        # A m√°gica acontece aqui: sgs.get busca todas as s√©ries de uma vez
        # O resultado √© um DataFrame com a data como √≠ndice e cada s√©rie como uma coluna
        df_bacen = sgs.get(codigos, start=data_inicio) # Pode adicionar end=DATA_FIM se definiu

        if df_bacen.empty:
            logging.warning("‚ö†Ô∏è O BCB SGS n√£o retornou dados para os c√≥digos/per√≠odo especificados.")
            return

        # A biblioteca j√° nomeia as colunas com os nomes descritivos que passamos no dict!
        logging.info(f"üìä Dados do BCB coletados com sucesso. Shape: {df_bacen.shape}")
        logging.info(f"Colunas: {df_bacen.columns.tolist()}") # Verificar se os nomes est√£o corretos
        logging.info(f"Per√≠odo dos dados: {df_bacen.index.min().strftime('%Y-%m-%d')} a {df_bacen.index.max().strftime('%Y-%m-%d')}")
        logging.info(f"Valores ausentes por coluna:\n{df_bacen.isnull().sum()}")

        # Garantir que o diret√≥rio exista
        os.makedirs(os.path.dirname(filename), exist_ok=True)

        # Salvar em CSV
        # O √≠ndice (data) ser√° salvo como a primeira coluna por padr√£o
        df_bacen.to_csv(filename, encoding='utf-8')
        logging.info(f"‚úÖ Dados brutos do BCB salvos em: {filename}")

    except Exception as e:
        logging.error(f"‚ùå Erro ao coletar dados do BCB: {e}", exc_info=True)

# --- Execu√ß√£o ---
if __name__ == "__main__":
    # Verifica se o diret√≥rio de sa√≠da existe antes de pausar (opcional)
    print(f"Os dados do BACEN ser√£o salvos em: {os.path.abspath(output_file)}") # Mostra caminho absoluto
    # input("Pressione Enter para continuar...") # Pausa opcional

    coleta_dados_bacen(CODIGOS_BCB, DATA_INICIO, output_file)
    print("‚úÖ Script de coleta do BCB finalizado.")